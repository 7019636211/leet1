1
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        seen = {}
        for i, num in enumerate(nums):
            complement = target - num
            if complement in seen:
                return [seen[complement], i]
            seen[num] = i             
        return None

2
class Solution:
    def romanToInt(self, s: str) -> int:
        translations = {
            "I": 1,
            "V": 5,
            "X": 10,
            "L": 50,
            "C": 100,
            "D": 500,
            "M": 1000
        }
        number = 0
        s = s.replace("IV", "IIII").replace("IX", "VIIII")
        s = s.replace("XL", "XXXX").replace("XC", "LXXXX")
        s = s.replace("CD", "CCCC").replace("CM", "DCCCC")
        for char in s:
            number += translations[char]
        return number

3
class Solution(object):
    def longestCommonPrefix(self, strs):
        if len(strs) == 0:
            return ""

        base = strs[0]
        for i in range(len(base)):
            for word in strs[1:]:
                if i == len(word) or word[i] != base[i]:
                    return base[0:i]

        return base

4
class Solution(object):
    def isValid(self, s):
        stack = [] # only use append and pop
        pairs = {
            '(': ')',
            '{': '}',
            '[': ']'
        }
        for bracket in s:
            if bracket in pairs:
                stack.append(bracket)
            elif len(stack) == 0 or bracket != pairs[stack.pop()]:
                return False

        return len(stack) == 0

5
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        # If one of the lists is empty, return the other list
        if not list1:
            return list2
        elif not list2:
            return list1
        # Initialize a dummy head node
        head = ListNode(0)
        # Initialize current node to the dummy head
        current = head
        # Traverse both lists
        while list1 and list2:
            # If the value of list1's node is <= to list2's, append it to the merged list
            if list1.val <= list2.val:
                current.next = list1
                list1 = list1.next
            # Otherwise, append list2's node to the merged list
            else:
                current.next = list2
                list2 = list2.next
            # Move to the next node in the merged list
            current = current.next
        # If there are remaining nodes in either list, append them to the merged list
        if list1:
            current.next = list1
        elif list2:
            current.next = list2
        # Return the merged list, excluding the dummy head
        return head.next

6
class Solution(object):
    def removeDuplicates(self, nums):
        replace = 1
        for i in range(1, len(nums)):
            if nums[i-1] != nums[i]:
                nums[replace] = nums[i]
                replace += 1
        return replace

7

class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        for i in range(len(haystack)):
            if haystack[i] == needle[0]:
                if haystack[i:i+len(needle)] == needle:
                    return i
        return -1

8

class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:

        for i in range(len(digits)-1,-1,-1):
            if digits[i]==9:
                digits[i]=0
            else:
                digits[i]+=1
                return digits
        return [1]+digits
        

9

class Solution:
    def mySqrt(self, x: int) -> int:
        left=0
        right=x
        while left <=right:
            mid=(left+right)//2
            if (mid*mid)==x:
                return mid
            elif (mid*mid)<x:
            
                left=mid+1
            else:
                right=mid-1
                
        return right

10

class Solution:
    def climbStairs(self, n: int) -> int:
        fib1, fib2 = 0, 1
        for i in range(n):
            res = fib1 + fib2
            fib1 = fib2
            fib2 = res
        return res
        
11
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        l = len(nums1)-m

        for i in range(l):
            nums1.remove(0)

        for i in nums2:
            nums1.append(i)
            
        nums1.sort()